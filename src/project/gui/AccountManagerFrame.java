/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package project.gui;

import project.Controller;
import project.gui.util.DollarAmountFormatter;
import project.gui.util.FieldInputVerifier;
import project.gui.util.IntegerFormatter;
import project.gui.util.PercentageFormatter;
import project.model.*;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author Rich
 */
public final class AccountManagerFrame extends AbstractUserWindow implements DocumentListener, PropertyChangeListener {

    
    /**
     * Creates new form AccountManagerFrame
     */
    public AccountManagerFrame(Controller controller) {
        super(controller);
        initComponents();
        setListeners();
        updateAccountManagerTable();
    }
    
    public void updateAccountManagerTable(){
        accountManagerTable.setModel(new javax.swing.table.DefaultTableModel(
                controller.updateAccountManagerTableView(),
                new String[]{
                        "User", "SSN", "Account", "Balance"
                }) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        accountManagerTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        accountManagerTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (accountManagerTable.getSelectedRow() >= 0) {
                    addAccountButton.setEnabled(true);
                    closeAccountButton.setEnabled(true);
                } else {
                    addAccountButton.setEnabled(false);
                    closeAccountButton.setEnabled(false);
                }
            }
        });
        accountManagerTable.revalidate();
    }
    
    private void action(){
        if(firstNameField.getText().equals("")){
            OKButton.setEnabled(false);
            return;
        }
        if(lastNameField.getText().equals("")){
            OKButton.setEnabled(false);
            return;
        }
        if(usernameField.getText().equals("")){
            OKButton.setEnabled(false);
            return;
        }
        if(emailField.getText().equals("")){
            OKButton.setEnabled(false);
            return;
        }
        if(DOBField.getText().equals("")){
            OKButton.setEnabled(false);
            return;
        }
        if(SSNField.getText().equals("")){
            OKButton.setEnabled(false);
            return;
        }
        OKButton.setEnabled(true);
    }

    private void setListeners(){
        firstNameField.getDocument().addDocumentListener(this);
        lastNameField.getDocument().addDocumentListener(this);
        usernameField.getDocument().addDocumentListener(this);
        emailField.getDocument().addDocumentListener(this);
        DOBField.addPropertyChangeListener("value", this);
        SSNField.addPropertyChangeListener("value", this);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    /*
     * TODO I edited this
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UserView = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        SSNField = new javax.swing.JFormattedTextField();
        DOBField = new javax.swing.JFormattedTextField();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        addUserButton = new javax.swing.JButton();
        addAccountButton = new JButton();
        closeAccountButton = new JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountManagerTable = new javax.swing.JTable();

        UserView.setLocationByPlatform(true);
        UserView.setModal(true);
        UserView.setResizable(false);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("First Name:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Last Name:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("SSN:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Date of Birth:");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("email:");

        OKButton.setText("OK");
        OKButton.setEnabled(false);
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");

        try {
            SSNField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        DOBField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Username:");

        javax.swing.GroupLayout UserViewLayout = new javax.swing.GroupLayout(UserView.getContentPane());
        UserView.getContentPane().setLayout(UserViewLayout);
        UserViewLayout.setHorizontalGroup(
            UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(UserViewLayout.createSequentialGroup()
                        .addGap(0, 104, Short.MAX_VALUE)
                        .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UserViewLayout.createSequentialGroup()
                        .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SSNField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(DOBField)
                            .addComponent(firstNameField)
                            .addComponent(lastNameField)
                            .addComponent(emailField)
                            .addComponent(usernameField))))
                .addContainerGap())
        );
        UserViewLayout.setVerticalGroup(
            UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(SSNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(DOBField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(UserViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OKButton)
                    .addComponent(CancelButton))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        addUserButton.setText("Add user");
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        addAccountButton.setText("Add account for selected user");
        addAccountButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                addAccountButtonActionPerformed(evt);
            }
        });
        addAccountButton.setEnabled(false);

        closeAccountButton.setText("Close selected account");
        closeAccountButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                closeAccountButtonActionPerformed(evt);
            }
        });
        closeAccountButton.setEnabled(false);

        jScrollPane1.setViewportView(accountManagerTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(closeAccountButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addAccountButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addUserButton)
                        .addGap(10, 10, 10)
                        .addComponent(addAccountButton)
                        .addGap(10, 10, 10)
                        .addComponent(closeAccountButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        UserView.pack();
        UserView.setVisible(true);
    }//GEN-LAST:event_addUserButtonActionPerformed

    private void addAccountButtonActionPerformed(ActionEvent evt) {
        User user = (User) accountManagerTable.getModel().getValueAt(accountManagerTable.getSelectedRow(), 0);
        new AddAccountDialog(user).setVisible(true);
    }

    private void closeAccountButtonActionPerformed(ActionEvent evt) {
        Account account = (Account) accountManagerTable.getModel().getValueAt(accountManagerTable.getSelectedRow(), 2);
        controller.closeAccount(account);
        updateAccountManagerTable();
    }

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        String firstName = firstNameField.getText();
        String lastName = lastNameField.getText();
        String username = usernameField.getText();
        String email = emailField.getText();
        Calendar dateOfBirth = Calendar.getInstance();
        dateOfBirth.setTime((Date) DOBField.getValue());
        int ssn = Integer.parseInt(SSNField.getText().replace("-", "")); // note that the SSN field formats it correctly
        try {
            User user = controller.createNewUser(firstName, lastName, dateOfBirth, ssn, email, username);
            new AddAccountDialog(user).setVisible(true);
            // TODO what if they hit cancel on this dialog?
        } catch (InvalidInputException e) {
            controller.handleException(this, e);
        }
        UserView.dispose();
        updateAccountManagerTable();
    }//GEN-LAST:event_OKButtonActionPerformed

    // TODO I modified this
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountManagerTable;
    private javax.swing.JButton CancelButton;
    private javax.swing.JFormattedTextField DOBField;
    private javax.swing.JButton OKButton;
    private javax.swing.JFormattedTextField SSNField;
    private javax.swing.JDialog UserView;
    private javax.swing.JButton addAccountButton;
    private javax.swing.JButton addUserButton;
    private javax.swing.JButton closeAccountButton;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables

    //DocumentListener
    @Override
    public void insertUpdate(DocumentEvent e) {
        action();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        action();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        action();
    }

    //PropertyListener
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        action();
    }

    private final class AddAccountDialog extends JDialog {
        private final User user;

        private final ComboBoxModel comboBoxModel;

        private JFormattedTextField amountTextField;

        private JComboBox cdTermComboBox;

        private JFormattedTextField loanTermTextField;

        private JFormattedTextField interestPremiumTextField;

        private AddAccountDialog(User user) {
            this.user = user;
            setTitle("Add account");
            setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            comboBoxModel = new DefaultComboBoxModel(Account.Type.values());
            comboBoxModel.setSelectedItem(Account.Type.SAVINGS);
            initComponents();
            updateForSelectedType();
        }

        private void initComponents() {
            setLayout(new GridLayout(6, 1));

            JPanel typePanel = new JPanel(new BorderLayout());
            typePanel.add(new JLabel("Account type"), BorderLayout.WEST);
            JComboBox comboBox = new JComboBox(comboBoxModel);
            typePanel.add(comboBox, BorderLayout.EAST);
            comboBox.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    updateForSelectedType();
                }
            });
            add(typePanel);

            JPanel amountPanel = new JPanel(new BorderLayout());
            amountPanel.add(new JLabel("Amount/credit limit"), BorderLayout.WEST);
            amountTextField = new JFormattedTextField(new DollarAmountFormatter.Factory(), BigDecimal.ZERO);
            amountTextField.setInputVerifier(new FieldInputVerifier(AccountManagerFrame.this) {
                @Override
                protected void setField(BigDecimal value) throws InvalidInputException {
                    // empty because this is checked when the user hits OK
                }
            });
            amountPanel.add(amountTextField, BorderLayout.EAST);
            add(amountPanel);

            JPanel cdTermPanel = new JPanel(new BorderLayout());
            cdTermPanel.add(new JLabel("CD term"), BorderLayout.WEST);
            cdTermComboBox = new JComboBox(new DefaultComboBoxModel(CertificateOfDeposit.Term.values()));
            cdTermPanel.add(cdTermComboBox, BorderLayout.EAST);
            add(cdTermPanel);

            JPanel loanTermPanel = new JPanel(new BorderLayout());
            loanTermPanel.add(new JLabel("Loan term"), BorderLayout.WEST);
            loanTermTextField = new JFormattedTextField(new IntegerFormatter.Factory(), 0);
            loanTermTextField.setInputVerifier(new InputVerifier() {
                @Override
                public boolean verify(JComponent input) {
                    try {
                        ((JFormattedTextField) input).commitEdit();
                        int value = (Integer) ((JFormattedTextField) input).getValue();
                        if (value <= 0) {
                            InvalidInputException iix = new InvalidInputException(new BigDecimal(value), "term must be positive");
                            controller.handleException(AccountManagerFrame.this, iix);
                            return false;
                        }
                        return true;
                    } catch (ParseException px) {
                        return false;
                    }
                }

                @Override
                public boolean shouldYieldFocus(JComponent input) {
                    return verify(input);
                }
            });
            loanTermPanel.add(loanTermTextField, BorderLayout.EAST);
            add(loanTermPanel);

            JPanel interestPremiumPanel = new JPanel(new BorderLayout());
            interestPremiumPanel.add(new JLabel("Interest premium"), BorderLayout.WEST);
            interestPremiumTextField = new JFormattedTextField(new PercentageFormatter.Factory(), BigDecimal.ZERO);
            interestPremiumTextField.setInputVerifier(new FieldInputVerifier(AccountManagerFrame.this) {
                @Override
                protected void setField(BigDecimal value) throws InvalidInputException {
                    // empty because this is checked when the user hits OK
                }
            });
            interestPremiumPanel.add(interestPremiumTextField, BorderLayout.EAST);
            add(interestPremiumPanel);

            JPanel buttonPanel = new JPanel(new BorderLayout());
            JButton addButton = new JButton("Add");
            addButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Account.Type type = (Account.Type) comboBoxModel.getSelectedItem();
                    try {
                        Account account;
                        switch (type) {
                            case CHECKING:
                                account = new CheckingAccount();
                                break;
                            case SAVINGS:
                                account = new SavingsAccount();
                                break;
                            case CD:
                                account = new CertificateOfDeposit((BigDecimal) amountTextField.getValue(),
                                        (CertificateOfDeposit.Term) cdTermComboBox.getSelectedItem());
                                break;
                            case LOAN:
                                account = new Loan((BigDecimal) amountTextField.getValue(),
                                        (Integer) loanTermTextField.getValue(),
                                        (BigDecimal) interestPremiumTextField.getValue());
                                break;
                            case LINE_OF_CREDIT:
                                account = new LineOfCredit((BigDecimal) amountTextField.getValue(),
                                        (BigDecimal) interestPremiumTextField.getValue());
                                break;
                            default:
                                throw new UnsupportedOperationException("unknown account type");
                        }
                        controller.addAccountToUser(user, account);
                        updateAccountManagerTable();
                        AddAccountDialog.this.dispose();
                    } catch (InvalidInputException iix) {
                        controller.handleException(AccountManagerFrame.this, iix);
                    } catch (LoanCapException lcx) {
                        // TODO
                    }
                }
            });
            buttonPanel.add(addButton, BorderLayout.WEST);
            JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AddAccountDialog.this.dispose();
                }
            });
            buttonPanel.add(cancelButton, BorderLayout.EAST);
            add(buttonPanel, BorderLayout.SOUTH);
        }

        private void updateForSelectedType() {
            switch ((Account.Type) comboBoxModel.getSelectedItem()) {
                case SAVINGS:
                case CHECKING:
                    amountTextField.setEnabled(false);
                    cdTermComboBox.setEnabled(false);
                    loanTermTextField.setEnabled(false);
                    interestPremiumTextField.setEnabled(false);
                    break;
                case CD:
                    amountTextField.setEnabled(true);
                    cdTermComboBox.setEnabled(true);
                    loanTermTextField.setEnabled(false);
                    interestPremiumTextField.setEnabled(false);
                    break;
                case LOAN:
                    amountTextField.setEnabled(true);
                    cdTermComboBox.setEnabled(false);
                    loanTermTextField.setEnabled(true);
                    interestPremiumTextField.setEnabled(true);
                    break;
                case LINE_OF_CREDIT:
                    amountTextField.setEnabled(true);
                    cdTermComboBox.setEnabled(false);
                    loanTermTextField.setEnabled(false);
                    interestPremiumTextField.setEnabled(true);
                    break;
                default:
                    throw new UnsupportedOperationException("unknown account type");
            }
            pack();
        }
    }
}
